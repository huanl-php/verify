<?php


namespace HuanL\Verify\Tests;

use HuanL\Verify\MathHelp;
use HuanL\Verify\Rule;
use HuanL\Verify\Verify;
use PHPUnit\Framework\TestCase;

require_once './../src/Verify.php';
require_once './../src/Rule.php';
require_once './../src/MathHelp.php';

class RuleTest extends TestCase {
    /** @var Rule */
    protected $rule;

    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */ {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->rule = new Rule();
    }

    public function testRegex() {
        $msg = '不是整数';
        $this->rule->regex('/^[0-9]+$/', $msg);
        self::assertEquals($this->rule->check('991a3'), false);
        self::assertEquals($this->rule->getErrorMsg(), '不是整数');
        self::assertEquals($this->rule->check('94.651'), false);
        self::assertEquals($this->rule->check('9913'), true);
        $msg = '不是数字';
        $this->rule->regex(MathHelp::DIGITAL, $msg);
        self::assertEquals($this->rule->check('991a3'), false);
        self::assertEquals($this->rule->getErrorMsg(), '不是数字');
        self::assertEquals($this->rule->check('94.651'), true);
        self::assertEquals($this->rule->check('991.3'), true);
        self::assertEquals($this->rule->check('0'), true);
        self::assertEquals($this->rule->check('9.913'), true);
        self::assertEquals($this->rule->check('9.91.3'), false);
    }

    public function testLength() {
        $msg = '范围不对';
        $this->rule->length(6, $msg);
        self::assertEquals($this->rule->check('12313'), true);
        self::assertEquals($this->rule->check('123sd123124'), false);
        self::assertEquals($this->rule->getErrorMsg(), $msg);
    }
}